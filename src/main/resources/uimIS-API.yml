swagger: '2.0'
info:
  description: 'UIM IS Reactive API documentation'
  version: '1.0.0'
  title: 'UIM IS'
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: 'palodudak@gmail.com'
  license:
    name: 'MIT'
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: 'research.interes.group'
basePath: '/v1/reactive'
tags:
- name: 'course'
  description: 'Operations about courses'
- name: 'user'
  description: 'Operations about user'
schemes:
- 'https'
- 'http'
paths:
  /course/createCourse/:
    post:
      tags:
      - 'course'
      summary: 'Creates course'
      operationId: 'createCourse'
      consumes:
      - 'application/json'
      produces:
      - 'application/json'
      parameters:
        - in: 'body'
          name: 'user'
          schema:
            $ref: '#/definitions/EmbeddedCourse'
      responses:
        200:
          description: 'successful operation'
        400:
          description: 'Invalid id supplied'
        404:
          description: 'Course not found'

  /user/login:
    get:
      tags:
      - 'user'
      summary: 'Logs user into the system'
      description: ''
      operationId: 'loginUser'
      produces:
      - 'application/xml'
      - 'application/json'
      parameters:
      - name: 'username'
        in: 'query'
        description: 'The user name for login'
        required: true
        type: 'string'
      - name: 'password'
        in: 'query'
        description: 'The password for login in clear text'
        required: true
        type: 'string'
      responses:
        200:
          description: 'successful operation'
          schema:
            type: 'string'
          headers:
            X-Rate-Limit:
              type: 'integer'
              format: 'int32'
              description: 'calls per hour allowed by the user'
            X-Expires-After:
              type: 'string'
              format: 'date-time'
              description: 'date in UTC when token expires'
        400:
          description: 'Invalid username/password supplied'
  /user/logout:
    get:
      tags:
      - 'user'
      summary: 'Logs out current logged in user session'
      description: ''
      operationId: 'logoutUser'
      produces:
      - 'application/xml'
      - 'application/json'
      parameters: []
      responses:
        default:
          description: 'successful operation'
  /user/{username}:
    get:
      tags:
      - 'user'
      summary: 'Get user by user name'
      description: ''
      operationId: 'getUserByName'
      produces:
      - 'application/xml'
      - 'application/json'
      parameters:
      - name: 'username'
        in: 'path'
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        type: 'string'
      responses:
        200:
          description: 'successful operation'
          schema:
            $ref: '#/definitions/User'
        400:
          description: 'Invalid username supplied'
        404:
          description: 'User not found'
          
securityDefinitions:
  uim_is_auth:
    type: 'oauth2'
    authorizationUrl: 'http://research.interes.group/oauth/dialog'
    flow: 'implicit'
    scopes:
      read:users: 'read users'
  api_key:
    type: 'apiKey'
    name: 'api_key'
    in: 'header'
definitions:
  User:
    type: object
    properties:
      id:
        type: string
      isID:
        type: integer
        format: int64
      firstName:
        type: string
      lasttName:
        type: string
        
  EmbeddedUser:
    type: object
    properties:
      isID:
        type: integer
      firstName:
        type: string
      lastName:
        type: string
      userType:
        type: object
        $ref: '#/definitions/UserType'
        
  Teacher:
    allOf: 
      - $ref: '#/definitions/User'
      - type: 'object'
        # properties:
        #   techingCourses:
        #     type: array
        #     items:
        #       $ref: '#/definitions/Course'
        
  EmbeddedCourse:
    type: object
    properties:
      title:
        type: string
      abrevaion:
        type: string
      semester:
          type: object
          $ref: '#/definitions/Semester'
      lecturers:
          type: array
          items:
            $ref: '#/definitions/EmbeddedUser'
      instructors:
          type: array
          items:
            $ref: '#/definitions/EmbeddedUser'
      lectures:
          type: array
          items:
            $ref: '#/definitions/EmbeddedUser'
      labs:
          type: array
          items:
            $ref: '#/definitions/Lecture'
      exams:
        type: array
        items:
          $ref: '#/definitions/Exam'
      finals:
        type: array
        items:
          $ref: '#/definitions/Exam'
          
  Lecture:
    type: object
    properties:
      room:
        type: object
        $ref: '#/definitions/Room'
      date:
        type: string
        format: date
  
  Exam:
    type: object
    properties:
      date:
        type: string
        format: date
      room:
        type: object
        $ref: '#/definitions/Room'
          
  Room:
    type: object
    properties:
      room:
        type: string
          
          
  Semester:
    type: string
    enum:
      - 'WINTER'
      - 'SPRING'
      
  UserType:
    type: 'string'
    enum: 
      - 'TEACHER'
      - 'STUDENT'
      
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string

        
externalDocs:
  description: 'Find out more about Swagger'
  url: 'http://swagger.io'
